import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from fpdf import FPDF
from io import BytesIO
import base64
from pathlib import Path

# Path file
file_path = r'c:\Users\user\Documents\Kuliah\MSIB\IQ\198_Peserta_Perhitungan_IQ.xlsx'
image_path = r'c:\Users\user\Documents\Kuliah\MSIB\IQ\static\paper-brain-with-light-bulb.jpg'

# Load dataset
data = pd.read_excel(file_path)

# Hitung rata-rata dan standar deviasi
mean_score = data['Skor Mentah'].mean()
std_dev_score = data['Skor Mentah'].std()

def calculate_iq(raw_score, mean, std_dev):
    z_score = (raw_score - mean) / std_dev
    iq = 100 + 15 * z_score
    return iq

def categorize_iq(iq):
    if iq < 90:
        return "Di bawah rata-rata"
    elif 85 <= iq <= 110:
        return "Rata-rata"
    else:
        return "Di atas rata-rata"

# Fungsi untuk menambahkan latar belakang
def set_background(image_path):
    try:
        with open(image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode()
        st.markdown(f"""
        <style>
        .stApp {{
            background-image: url(data:image/png;base64,{encoded_image});
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            min-height: 100vh;
        }}
        </style>
        """, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"Error setting background: {e}")

set_background(image_path)

# Fungsi untuk membuat grafik distribusi dengan posisi skor mentah
def create_distribution_graph(mean, std_dev, raw_score):
    x = np.linspace(mean - 4 * std_dev, mean + 4 * std_dev, 1000)
    y = (1 / (std_dev * np.sqrt(2 * np.pi))) * np.exp(-0.5 * ((x - mean) / std_dev) ** 2)

    plt.figure(figsize=(8, 4))
    plt.plot(x, y, color='blue')
    plt.title("Distribusi Skor IQ")
    plt.axvline(mean, color='red', linestyle='dashed', label=f"Mean: {mean:.2f}")
    plt.axvline(raw_score, color='green', linestyle='dashed', label=f"Skor Mentah: {raw_score}")
    plt.fill_between(x, y, where=((x >= mean - std_dev) & (x <= mean + std_dev)), color='blue', alpha=0.2)
    plt.xlabel("Skor IQ")
    plt.ylabel("Density")
    plt.legend()
    plt.grid(True)

    # Simpan ke file sementara
    temp_file = "temp_graph.png"
    plt.savefig(temp_file, bbox_inches='tight')
    plt.close()
    return temp_file

# Fungsi untuk membuat PDF dengan header dan footer
def generate_pdf(iq, category, raw_score, name, graph_file_path):
    pdf = FPDF()
    pdf.add_page()

    # Header
    pdf.set_fill_color(0, 102, 204)  # Warna biru
    pdf.rect(0, 0, 210, 20, 'F')  # Membuat latar belakang biru untuk header
    pdf.set_text_color(255, 255, 255)  # Teks putih
    pdf.set_font("Arial", style='B', size=16)
    pdf.cell(200, 10, txt="Aplikasi Tes IQ", ln=True, align='C')
    pdf.set_font("Arial", style='I', size=12)
    pdf.cell(200, 10, txt="Hasil Tes IQ Anda", ln=True, align='C')
    pdf.ln(20)
    
    # Informasi Nilai IQ
    pdf.set_font("Arial", size=12)
    pdf.set_text_color(0, 0, 0)  # Teks hitam
    pdf.cell(200, 10, txt=f"Nama: {name}", ln=True, align='L')
    pdf.cell(200, 10, txt=f"Nilai IQ: {iq:.2f}", ln=True, align='L')
    pdf.cell(200, 10, txt=f"Kategori: {category}", ln=True, align='L')
    pdf.cell(200, 10, txt=f"Skor Mentah: {raw_score}", ln=True, align='L')
    pdf.ln(10)

    # Menambahkan grafik
    pdf.image(graph_file_path, x=10, y=None, w=190)
    pdf.ln(20)

    # Footer hanya di halaman pertama
    pdf.set_y(-30)  # Posisi footer di bagian bawah
    pdf.set_fill_color(0, 102, 204)  # Biru gelap
    pdf.rect(0, 270, 210, 10, 'F')  # Footer bar
    pdf.set_font("Arial", style='I', size=8)
    pdf.set_text_color(255, 255, 255)  # Teks putih
    pdf.cell(0, 10, txt="Generated by Aplikasi Tes IQ - 2024", ln=True, align='C', fill=True)
    
    # Simpan PDF ke buffer
    buffer = BytesIO()
    buffer.write(pdf.output(dest='S').encode('latin1'))
    buffer.seek(0)

    # Hapus file sementara
    Path(graph_file_path).unlink()

    return buffer

# Streamlit UI
st.title("Aplikasi Tes IQ")
st.markdown("Masukkan nama dan skor mentah untuk menghitung IQ Anda!")

# Input Nama
name = st.text_input("Masukkan Nama Anda:")

# Input skor mentah
raw_score = st.number_input("Masukkan Skor Mentah:", min_value=0, max_value=200)

if st.button("Hitung IQ"):
    # Perhitungan IQ
    iq = calculate_iq(raw_score, mean_score, std_dev_score)
    category = categorize_iq(iq)
    st.success(f"Nilai IQ Anda: {iq:.2f}")
    st.info(f"Kategori: {category}")
    st.write(f"Skor Mentah Anda: {raw_score}")

    # Buat grafik distribusi dengan garis skor mentah
    graph_file_path = create_distribution_graph(mean_score, std_dev_score, raw_score)

    # Tampilkan grafik di Streamlit
    st.image(graph_file_path, caption="Distribusi Skor IQ", use_container_width=True)

    # Buat PDF
    pdf_buffer = generate_pdf(iq, category, raw_score, name, graph_file_path)

    # Download PDF
    st.download_button(
        label="ðŸ“¥ Download Hasil PDF",
        data=pdf_buffer,
        file_name="Hasil_Test_IQ.pdf",
        mime="application/pdf"
    )
